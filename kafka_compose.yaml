##
##
##   docker-compose -f dotnet-compose.yml up -d 

version: '3.9'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"

  kafka-broker-01:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker-01
    hostname: kafka-broker-01
    restart: always
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    depends_on:
      - zookeeper      
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-01:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-broker-01:29093
      KAFKA_LISTENERS: PLAINTEXT://kafka-broker-01:29092,CONTROLLER://kafka-broker-01:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:9092 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s


  kafkahq:
    image: tchiotludo/kafkahq:latest
    container_name: kafkahq
    hostname: kafkahq      
    environment:
      KAFKAHQ_CONFIGURATION: |
        kafkahq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka-broker-01:29092"
              schema-registry:
                url: "http://kafka-schema-registry:8081"
              connect:
                url: "http://kafka-connect:8083"
    ports:
      - "8092:8080"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    hostname: elasticsearch
    restart: always
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.routing.allocation.disk.threshold_enabled=false
      - node.name=elasticsearch
      - discovery.seed_hosts=elasticsearch
      - xpack.monitoring.collection.enabled=true
      - xpack.security.audit.enabled=true
      - xpack.license.self_generated.type=trial      
      - network.host=0.0.0.0
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    hostname: kibana
    restart: always
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch      
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_REQUESTTIMEOUT: 90000

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    hostname: grafana   
    restart: unless-stopped    
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=p#filhos03
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - /docker/data/grafana/provisioning:/etc/grafana/provisioning
    links:
      - prometheus        
    depends_on:
      - prometheus
      - kibana

